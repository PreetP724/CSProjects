ComputeRectangle.java:
- Embedded Rectange Solver: a java algorithm to take any sized two dimensional storage of binary digits, 0 and 1, and find the location for an embedded rectangle of 1â€™s by strategically creating variations of binary array search

DigitRepresentation.java: reversed representation of digits by using a fixed capacity stack.

EmpiricalEvaluation.java: generates table of statistics for Strassen Matrix Multiplication algorithm in Strassen class including the count of key operations and runtime. Then, used table to analyze algorthim effiency and created formulas for certain key operations.

Evaluate.java: running and analyzing Djikstra's algorithm.

SolveSearch.java: created different functions for a two dimensional array storage using binary search. The "less" function returns the number of integers in each row of the array that are strictly smaller than inputted target. 
The "contains" function returns the row that contains an inputted target value. 

StackConverter.java: converted a stack into an array with the orginal elemenst in their orignal order.

Staque.java: developed a "Staque" datatype which is a structure that contains a stack on the left side of the storage and a queue on the right side of the storage. Also, created key operations for the structure such as push, pop, enqueue, and dequeue.

Strassen: instrumented code to count key operations of Strassen's matrix multiplication algorithm.
